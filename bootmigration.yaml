- name: playbooks/bootmigration.yml
  hosts: all
  remote_user: root
  vars:
   create_partition: test
   boot_device: sda
  tasks:
  - name: Check OS version before boot migration
    fail:
     msg: System is not upgraded to RHEL 7, check previous playbook
    when: ansible_distribution == "Red Hat Enterprise Linux"  and ansible_distribution_major_version | int == 7
  - name: Identity current boot device partition
    shell:  cat /proc/mounts | grep boot | awk '{print $1 }' | grep -o '[0-9]\+'
    register: current_partition

  - name: Install grub2 pacakges
    package:
     name: "{{ item }}"
    with_items:
     - grub2
     - grub2-tools
     - grubby

  - name: Capture GRUB commandline for default grub file
    shell: cat /proc/cmdline
    register: grub_cmdline

  - name: Replace boot device partition number
    shell: sed -i 's/root (hd0,0)/root (hd0,3)/g' /boot/grub/grub.conf

#  - name: Capture UUID for boot partition
#    shell: /bin/lsblk -f | grep boot | awk '{print $3}'
#    register: boot_mount

  - name: Capture start sector of the device
    shell: /usr/sbin/parted -m  /dev/{{ boot_device }} unit s print | tail -1  | awk -F':' '{print $3}' | sed 's/s//g' | awk '{print $1 + 1 }'
    register: start_sector

  - name: Identity partition number
    shell: /usr/sbin/parted -m  /dev/"{{ boot_device }}" unit s print | tail -1 | awk -F':' '{print $1 + 1 }'
    register: target_partition

  - name: Create new partition
    parted:
     device: /dev/"{{ boot_device }}"
     number: "{{ target_partition.stdout | int }}"
     state: present
     part_start: "{{ start_sector.stdout| int }}s"
     part_end: "100%"
     unit: "s"
     part_type: primary

  - name: Format the partition - ext4
    filesystem:
     dev: /dev/{{ boot_device }}{{ target_partition.stdout | int }}
     fstype: ext4
    when:  current_partition.stdout != target_partition.stdout

  - name: Create mountpoint dir /mnt/boot
    file:
     name: /mnt/boot
     state: directory

  - name: Mount the filesystem under /mnt/boot
    mount:
     src: /dev/{{ boot_device }}{{ target_partition.stdout | int }}
     path: /mnt/boot
     state: mounted
     fstype: ext4

  - name: Copy boot FS contents
    shell: rsync -av /boot/ /mnt/boot/

  - name: umount /mnt/boot
    mount:
     path: /mnt/boot
     state: absent

  - name: Capture new boot partition UUID
    shell:  /bin/lsblk -f | grep {{ boot_device }}{{ target_partition.stdout | int }} | awk '{print $3}'
    register: new_boot_uuid

  - name: umount /boot parition
    mount:
     path: /boot
     state: absent
    ignore_errors: true

  - name: create boot mountpoint directory
    file:
     path: /boot
     state: directory

  - name: mount new boot partition
    mount:
     path: /boot
     src: UUID={{ new_boot_uuid.stdout }}
     fstype: ext4
     state: present

  - name: mount new boot partition
    mount:
     path: /boot
     src: UUID={{ new_boot_uuid.stdout }}
     fstype: ext4
     state: mounted

  - name: Copy grub file
    template:
      src: templates/grub.j2
      dest: /etc/default/grub
      mode: 665

 # - name: Remove grub
 #   package:
 #    name: grub
 #    state: absent

  - name: Install grub2 boot loader
    shell: /usr/sbin/grub2-install /dev/{{ boot_device }}
    ignore_errors: true

  - name: Create grub2.cfg file
    shell: /usr/sbin/grub2-mkconfig -o /boot/grub2/grub.cfg


  - name: Clean up grub config files
    file:
     path: "{{ item }}"
     state: absent
    with_items:
     - /boot/grub
     - /etc/grub.conf


  - name: Reboot the server to boot with the new partition
    shell: "sleep 5 && /sbin/reboot"
    async: 1
    poll: 0

  - name: Wait for the reboot to complete and come back online.
    wait_for_connection:
     connect_timeout: 10
     sleep: 5
     delay: 60
     timeout: 300
